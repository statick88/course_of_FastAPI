[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Curso de FastAPI",
    "section": "",
    "text": "Bienvenido",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  },
  {
    "objectID": "index.html#de-qué-trata-este-curso",
    "href": "index.html#de-qué-trata-este-curso",
    "title": "Curso de FastAPI",
    "section": "¿De qué trata este curso?",
    "text": "¿De qué trata este curso?\nEste curso completo me llevará desde los fundamentos básicos de la programación hasta la construcción de aplicaciones prácticas utilizando los frameworks Django y la biblioteca de React.\nA través de una combinación de teoría y ejercicios prácticos, me sumergiré en los conceptos esenciales del desarrollo web y avanzaré hacia la creación de proyectos del mundo real.\nDesde la configuración del entorno de desarrollo hasta la construcción de una aplicación web de pila completa, este curso me proporcionará una comprensión sólida y experiencia práctica con FastAPI.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  },
  {
    "objectID": "index.html#para-quién-es-este-curso",
    "href": "index.html#para-quién-es-este-curso",
    "title": "Curso de FastAPI",
    "section": "¿Para quién es este curso?",
    "text": "¿Para quién es este curso?\nEste curso está diseñado para principiantes y aquellos con poca o ninguna experiencia en programación.\nYa sea que sea un estudiante curioso, un profesional que busca cambiar de carrera o simplemente alguien que quiere aprender desarrollo web, este curso es para usted. Desde adolescentes hasta adultos, todos son bienvenidos a participar y explorar el emocionante mundo del desarrollo web con FastAPI.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  },
  {
    "objectID": "index.html#cómo-contribuir",
    "href": "index.html#cómo-contribuir",
    "title": "Curso de FastAPI",
    "section": "¿Cómo contribuir?",
    "text": "¿Cómo contribuir?\nValoramos su contribución a este curso. Si encuentra algún error, desea sugerir mejoras o agregar contenido adicional, me encantaría saber de usted.\nPuede contribuir a través del repositorio en linea, donde puede compartir sus comentarios y sugerencias.\nJuntos, podemos mejorar continuamente este recurso educativo para beneficiar a la comunidad de estudiantes y entusiastas de la programación.\nEste ebook ha sido creado con el objetivo de proporcionar acceso gratuito y universal al conocimiento.\nEstará disponible en línea para cualquier persona, sin importar su ubicación o circunstancias, para acceder y aprender a su propio ritmo.\nPuede descargarlo en formato PDF, Epub o verlo en línea en cualquier momento y lugar.\nEsperamos que disfrute este emocionante viaje de aprendizaje y descubrimiento en el mundo del desarrollo web con FastAPI!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_configuracion_y_sintaxis_basica.html#sintaxis-básica",
    "href": "unidades/unidad1/1_configuracion_y_sintaxis_basica.html#sintaxis-básica",
    "title": "Configuración y Sintaxis básica",
    "section": "Sintaxis básica",
    "text": "Sintaxis básica\nPython es un lenguaje de programación interpretado, lo que significa que el código se ejecuta línea por línea. A continuación se muestra un ejemplo de un programa simple en python:\n# Este es un comentario\nprint(\"Hola Mundo!\")\nPara ejecutar este programa, puedes guardar el código en un archivo con extensión .py y ejecutarlo desde la terminal con el comando python nombre_del_archivo.py.\n\n\n\nEn este caso, el programa imprimirá en la terminal el mensaje Hola Mundo!.\nEn este primer capítulo de la unidad, aprendimos la configuración básica de python y la sintaxis básica para escribir programas en python.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Configuración y Sintaxis básica</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_variables_y_control_de_flujo.html",
    "href": "unidades/unidad1/2_variables_y_control_de_flujo.html",
    "title": "Variables y Control de flujo",
    "section": "",
    "text": "Python\n\n\n\nEn python las variables se pueden declarar sin necesidad de especificar el tipo de dato, por lo que se puede asignar cualquier tipo de dato a una variable, sin embargo en FastAPI es necesario especificar el tipo de dato de las variables.\n# Declaración de variables\na = 5\nb = 3.14\nc = \"Hola Mundo\"\nPara imprimir el valor de una variable se utiliza la función print().\nprint(a)\nprint(b)\nprint(c)\nPara especìficar el tipo de dato de una variable se utiliza la siguiente sintaxis:\n# Declaración de variables con tipo de dato\na: int = 5\nb: float = 3.14\nc: str = \"Hola Mundo\"\nPara realizar operaciones aritméticas se utilizan los siguientes operadores:\n\nSuma: +\nResta: -\nMultiplicación: *\nDivisión: /\nMódulo: %\nExponente: **\nDivisión entera: //\n\n# Operaciones aritméticas\nsuma = a + b\nresta = a - b\nmultiplicacion = a * b\ndivision = a / b\nmodulo = a % b\nexponente = a ** b\ndivision_entera = a // b\n\nprint(suma)\nprint(resta)\nprint(multiplicacion)\nprint(division)\nprint(modulo)\nprint(exponente)\nprint(division_entera)\nPara realizar comparaciones se utilizan los siguientes operadores:\n\nIgual que: ==\nDiferente de: !=\nMayor que: &gt;\nMenor que: &lt;\nMayor o igual que: &gt;=\nMenor o igual que: &lt;=\n\n# Comparaciones\nigual = a == b\ndiferente =\nPara realizar operaciones lógicas se utilizan los siguientes operadores:\n\nAND: and\nOR: or\nNOT: not\n\n# Operaciones lógicas\nand = True and False\nor = True or False\nnot = not True\nPara realizar estructuras de control de flujo se utilizan las siguientes estructuras:\n\nif\nelif\nelse\n\n# Estructuras de control de flujo\nif a &gt; b:\n    print(\"a es mayor que b\")\nelif a &lt; b:\n    print(\"a es menor que b\")\nelse:\n    print(\"a es igual a b\")\nTambien existen otras estructuras de control de flujo como:\n\nfor\nwhile\n\n# Estructuras de control de flujo\nfor i in range(5):\n    print(i)\n    \ni = 0\nwhile i &lt; 5:\n    print(i)\n    i += 1\nEn FastAPI se pueden declarar variables en las rutas y se pueden especificar el tipo de dato de las variables.\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    return {\"item_id\": item_id}\nEn el ejemplo anterior se declara una ruta con una variable llamada item_id de tipo entero, cuando analicemos FastAPI en sus primeros capítulos se explicará con más detalle.\nEn este capítulo de la unidad, aprendimos a declarar variables, realizar operaciones aritméticas, comparaciones, operaciones lógicas y estructuras de control de flujo en python.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Variables y Control de flujo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_funciones_y_parametros.html#parámetros-con-valores-por-defecto",
    "href": "unidades/unidad1/3_funciones_y_parametros.html#parámetros-con-valores-por-defecto",
    "title": "Funciones y Parámetros",
    "section": "Parámetros con valores por defecto",
    "text": "Parámetros con valores por defecto\nEn Python es posible asignar valores por defecto a los parámetros de una función. A continuación se muestra un ejemplo de una función que suma dos números con un valor por defecto para el segundo parámetro:\ndef suma(a, b=0):\n    return a + b\n\nresultado = suma(5)\nprint(resultado)\nEn el ejemplo anterior, la función suma() recibe dos parámetros, el primer parámetro es obligatorio y el segundo parámetro tiene un valor por defecto de 0.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Funciones y Parámetros</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_funciones_y_parametros.html#parámetros-con-nombre",
    "href": "unidades/unidad1/3_funciones_y_parametros.html#parámetros-con-nombre",
    "title": "Funciones y Parámetros",
    "section": "Parámetros con nombre",
    "text": "Parámetros con nombre\nEn Python es posible pasar los parámetros de una función por nombre. A continuación se muestra un ejemplo de una función que multiplica dos números con los parámetros pasados por nombre:\ndef multiplicacion(a, b):\n    return a * b\n\nresultado = multiplicacion(b=5, a=3)\nprint(resultado)\nEn el ejemplo anterior, los parámetros de la función multiplicacion() se pasan por nombre, por lo que el orden de los parámetros no importa.\n\n\n\n\n\n\nTip\n\n\n\nCuando aprendamos acerca de la POO (Programaciòn Orientada a Objetos) veremos que las funciones que se definen dentro de una clase se llaman métodos.\n\n\nEn FastAPI es posible definir funciones que se ejecutan cuando se realiza una petición HTTP a una ruta específica. Cuando analicemos FastAPI veremos cómo definir funciones que se ejecutan cuando se realiza una petición HTTP a una ruta específica.\nEn este tercer capítulo de la unidad, aprendimos a definir funciones en Python y a utilizar parámetros con valores por defecto y parámetros con nombre.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Funciones y Parámetros</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/1_listas_y_tuplas.html#listas",
    "href": "unidades/unidad2/1_listas_y_tuplas.html#listas",
    "title": "Listas y Tuplas",
    "section": "Listas",
    "text": "Listas\nLas listas en Python se definen utilizando corchetes [ ] y los elementos de la lista se separan por comas ,. A continuación se muestra un ejemplo de una lista con números enteros:\n# Declaración de una lista\nnumeros = [1, 2, 3, 4, 5]\nPara acceder a un elemento de la lista se utiliza el índice del elemento. Los índices en Python empiezan en 0. A continuación se muestra un ejemplo de cómo acceder al primer elemento de la lista:\n# Acceso a un elemento de la lista\nprimer_elemento = numeros[0]\nprint(primer_elemento)\nPara agregar un elemento a la lista se utiliza el método append(). A continuación se muestra un ejemplo de cómo agregar un elemento a la lista:\n# Agregar un elemento a la lista\nnumeros.append(6)\nprint(numeros)\nPara eliminar un elemento de la lista se utiliza el método remove(). A continuación se muestra un ejemplo de cómo eliminar un elemento de la lista:\n# Eliminar un elemento de la lista\nnumeros.remove(3)\nprint(numeros)",
    "crumbs": [
      "Unidad 2: Estructura de Datos en Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Listas y Tuplas</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/1_listas_y_tuplas.html#tuplas",
    "href": "unidades/unidad2/1_listas_y_tuplas.html#tuplas",
    "title": "Listas y Tuplas",
    "section": "Tuplas",
    "text": "Tuplas\nLas tuplas en Python se definen utilizando paréntesis ( ) y los elementos de la tupla se separan por comas ,. A continuación se muestra un ejemplo de una tupla con números enteros:\n# Declaración de una tupla\nnumeros = (1, 2, 3, 4, 5)\nPara acceder a un elemento de la tupla se utiliza el índice del elemento. Los índices en Python empiezan en 0. A continuación se muestra un ejemplo de cómo acceder al primer elemento de la tupla:\n# Acceso a un elemento de la tupla\nprimer_elemento = numeros[0]\nprint(primer_elemento)\nLas tuplas son inmutables, lo que significa que una vez que se crea una tupla no se pueden modificar los elementos de la tupla. A continuación se muestra un ejemplo de cómo intentar modificar un elemento de la tupla:\n# Intentar modificar un elemento de la tupla\nnumeros[0] = 10\nEn FastAPI es posible utilizar listas y tuplas para definir los parámetros de una función. Cuando analicemos FastAPI veremos cómo utilizar listas y tuplas para definir los parámetros de una función.\nEn este capítulo de la unidad, aprendimos acerca de las listas y las tuplas en Python.",
    "crumbs": [
      "Unidad 2: Estructura de Datos en Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Listas y Tuplas</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/2_diccionarios_y_conjuntos.html#diccionarios",
    "href": "unidades/unidad2/2_diccionarios_y_conjuntos.html#diccionarios",
    "title": "Diccionarios y Conjuntos",
    "section": "Diccionarios",
    "text": "Diccionarios\nLos diccionarios en Python son estructuras de datos que permiten almacenar pares clave-valor en una sola variable. Los diccionarios se definen utilizando llaves { } y los pares clave-valor se separan por comas ,. A continuación se muestra un ejemplo de un diccionario con nombres de personas y sus edades:\n# Declaración de un diccionario\n\npersonas = {\n    \"Juan\": 25,\n    \"Maria\": 30,\n    \"Pedro\": 35\n}\nPara acceder a un valor del diccionario se utiliza la clave del valor. A continuación se muestra un ejemplo de cómo acceder a la edad de la persona Juan:\n# Acceso a un valor del diccionario\n\nedad_juan = personas[\"Juan\"]\nprint(edad_juan)\nPara agregar un par clave-valor al diccionario se utiliza la siguiente sintaxis:\n# Agregar un par clave-valor al diccionario\n\npersonas[\"Ana\"] = 40\nprint(personas)\nPara eliminar un par clave-valor del diccionario se utiliza la siguiente sintaxis:\n# Eliminar un par clave-valor del diccionario\n\ndel personas[\"Pedro\"]\nprint(personas)",
    "crumbs": [
      "Unidad 2: Estructura de Datos en Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Diccionarios y Conjuntos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/2_diccionarios_y_conjuntos.html#conjuntos",
    "href": "unidades/unidad2/2_diccionarios_y_conjuntos.html#conjuntos",
    "title": "Diccionarios y Conjuntos",
    "section": "Conjuntos",
    "text": "Conjuntos\nLos conjuntos en Python son estructuras de datos que permiten almacenar elementos únicos en una sola variable. Los conjuntos se definen utilizando llaves { } y los elementos del conjunto se separan por comas ,. A continuación se muestra un ejemplo de un conjunto con números enteros:\n# Declaración de un conjunto\n\nnumeros = {1, 2, 3, 4, 5}\nPara agregar un elemento al conjunto se utiliza el método add(). A continuación se muestra un ejemplo de cómo agregar un elemento al conjunto:\n# Agregar un elemento al conjunto\n\nnumeros.add(6)\nprint(numeros)\nPara eliminar un elemento del conjunto se utiliza el método remove(). A continuación se muestra un ejemplo de cómo eliminar un elemento del conjunto:\n# Eliminar un elemento del conjunto\n\nnumeros.remove(3)\nprint(numeros)\nEn FastAPI es posible utilizar diccionarios y conjuntos para almacenar información y realizar operaciones con ellos. Cuando analicemos FastAPI veremos cómo utilizar diccionarios y conjuntos para almacenar información y realizar operaciones con ellos.\nEn este capítulo aprendimos acerca de los diccionarios y los conjuntos en Python.",
    "crumbs": [
      "Unidad 2: Estructura de Datos en Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Diccionarios y Conjuntos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/1_conceptos_basicos.html#clases-y-objetos",
    "href": "unidades/unidad3/1_conceptos_basicos.html#clases-y-objetos",
    "title": "Conceptos Básicos",
    "section": "Clases y Objetos",
    "text": "Clases y Objetos\nEn la Programación Orientada a Objetos (POO) los objetos son instancias de clases. Las clases son plantillas que definen las propiedades y los métodos de los objetos. A continuación se muestra un ejemplo de una clase en Python:\n# Declaración de una clase\n\nclass Persona:\n    def __init__(self, nombre, edad):\n        self.nombre = nombre\n        self.edad = edad\n\n    def saludar(self):\n        return f\"Hola, mi nombre es {self.nombre} y tengo {self.edad} años.\"\nEn el ejemplo anterior se declara una clase llamada Persona con dos propiedades nombre y edad y un método saludar() que retorna un mensaje con el nombre y la edad de la persona.\nPara crear un objeto de la clase Persona se utiliza la siguiente sintaxis:\n# Creación de un objeto de la clase Persona\n\npersona = Persona(\"Juan\", 25)\nmensaje = persona.saludar()\nprint(mensaje)\nEn el ejemplo anterior se crea un objeto de la clase Persona con el nombre Juan y la edad 25 y se llama al método saludar() del objeto persona.\nEn FastAPI es posible definir clases que se utilizan para definir los modelos de los datos que se envían y reciben en las peticiones HTTP. Cuando analicemos FastAPI veremos cómo definir clases que se utilizan para definir los modelos de los datos que se envían y reciben en las peticiones HTTP.\nEn este capítulo de la unidad, aprendimos acerca de las clases y los objetos en la Programación Orientada a Objetos (POO) en Python.",
    "crumbs": [
      "Unidad 3: Programación Orientada a Objetos en Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Conceptos Básicos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/2_herencia_y_polimorfismo.html#herencia",
    "href": "unidades/unidad3/2_herencia_y_polimorfismo.html#herencia",
    "title": "Herencia, Polimorfismo y Encapsulación",
    "section": "Herencia",
    "text": "Herencia\nLa herencia en la Programación Orientada a Objetos (POO) es un mecanismo que permite crear una nueva clase a partir de una clase existente. La nueva clase hereda las propiedades y los métodos de la clase existente. A continuación se muestra un ejemplo de una clase Vehiculo con las propiedades marca y modelo y un método mostrar() que retorna un mensaje con la marca y el modelo del vehículo:\n# Declaración de una clase Vehiculo\n\nclass Vehiculo:\n    def __init__(self, marca, modelo):\n        self.marca = marca\n        self.modelo = modelo\n\n    def mostrar(self):\n        return f\"Vehículo: {self.marca} {self.modelo}\"\nEn el ejemplo anterior se declara una clase Vehiculo con las propiedades marca y modelo y un método mostrar() que retorna un mensaje con la marca y el modelo del vehículo.\nPara crear una nueva clase Auto que hereda de la clase Vehiculo se utiliza la siguiente sintaxis:\n# Declaración de una clase Auto que hereda de la clase Vehiculo\n\nclass Auto(Vehiculo):\n    def __init__(self, marca, modelo, color):\n        super().__init__(marca, modelo)\n        self.color = color\n\n    def mostrar(self):\n        return f\"Auto: {self.marca} {self.modelo} de color {self.color}\"\nEn el ejemplo anterior se declara una clase Auto que hereda de la clase Vehiculo con la propiedad color y un método mostrar() que retorna un mensaje con la marca, el modelo y el color del auto.\nPara crear un objeto de la clase Auto se utiliza la siguiente sintaxis:\n# Creación de un objeto de la clase Auto\n\nauto = Auto(\"Toyota\", \"Corolla\", \"Rojo\")\nmensaje = auto.mostrar()\nprint(mensaje)\nEn el ejemplo anterior se crea un objeto de la clase Auto con la marca Toyota, el modelo Corolla y el color Rojo y se llama al método mostrar() del objeto auto.",
    "crumbs": [
      "Unidad 3: Programación Orientada a Objetos en Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Herencia, Polimorfismo y Encapsulación</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/2_herencia_y_polimorfismo.html#polimorfismo",
    "href": "unidades/unidad3/2_herencia_y_polimorfismo.html#polimorfismo",
    "title": "Herencia, Polimorfismo y Encapsulación",
    "section": "Polimorfismo",
    "text": "Polimorfismo\nEl polimorfismo en la Programación Orientada a Objetos (POO) es un mecanismo que permite que un objeto se com\n# Declaración de una clase Vehiculo\n\nclass Vehiculo:\n    def __init__(self, marca, modelo):\n        self.marca = marca\n        self.modelo = modelo\n\n    def mostrar(self):\n        return f\"Vehículo: {self.marca} {self.modelo}\"\nEn el ejemplo anterior se declara una clase Vehiculo con las propiedades marca y modelo y un método mostrar() que retorna un mensaje con la marca y el modelo del vehículo.\nPara crear una nueva clase Auto que hereda de la clase Vehiculo se utiliza la siguiente sintaxis:\n# Declaración de una clase Auto que hereda de la clase Vehiculo\n\nclass Auto(Vehiculo):\n    def __init__(self, marca, modelo, color):\n        super().__init__(marca, modelo)\n        self.color = color\n\n    def mostrar(self):\n        return f\"Auto: {self.marca} {self.modelo} de color {self.color}\"\nEn el ejemplo anterior se declara una clase Auto que hereda de la clase Vehiculo con la propiedad color y un método mostrar() que retorna un mensaje con la marca, el modelo y el color del auto.\nPara crear un objeto de la clase Auto se utiliza la siguiente sintaxis:\n# Creación de un objeto de la clase Auto\n\nauto = Auto(\"Toyota\", \"Corolla\", \"Rojo\")\nmensaje = auto.mostrar()\nprint(mensaje)\nEn el ejemplo anterior se crea un objeto de la clase Auto con la marca Toyota, el modelo Corolla y el color Rojo y se llama al método mostrar() del objeto auto.",
    "crumbs": [
      "Unidad 3: Programación Orientada a Objetos en Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Herencia, Polimorfismo y Encapsulación</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/2_herencia_y_polimorfismo.html#encapsulamiento",
    "href": "unidades/unidad3/2_herencia_y_polimorfismo.html#encapsulamiento",
    "title": "Herencia, Polimorfismo y Encapsulación",
    "section": "Encapsulamiento",
    "text": "Encapsulamiento\nEl encapsulamiento en la Programación Orientada a Objetos (POO) es un mecanismo que permite ocultar los detalles de implementación de una clase y exponer solo la interfaz de la clase. En Python, el encapsulamiento se logra utilizando los siguientes modificadores de acceso:\n\nPúblico: Los miembros de la clase son públicos y se pueden acceder desde cualquier parte del programa.\nProtegido: Los miembros de la clase son protegidos y se pueden acceder desde la clase y las clases derivadas.\nPrivado: Los miembros de la clase son privados y solo se pueden acceder desde la clase.\n\nA continuación se muestra un ejemplo de una clase Persona con los modificadores de acceso público, protegido y privado:\n# Declaración de una clase Persona\n\nclass Persona:\n    def __init__(self, nombre, edad):\n        self.nombre = nombre\n        self._edad = edad\n        self.__dni = \"12345678\"\n\n    def mostrar(self):\n        return f\"Persona: {self.nombre} {self._edad} {self.__dni}\"\n\n# Creación de un objeto de la clase Persona\n\npersona = Persona(\"Juan\", 25)\nmensaje = persona.mostrar()\nprint(mensaje)\nEn el ejemplo anterior se declara una clase Persona con los modificadores de acceso público, protegido y privado y se crea un objeto de la clase Persona con el nombre Juan, la edad 25 y el DNI 12345678.\nEn FastAPI es posible definir clases que se utilizan para definir los modelos de los datos que se envían y reciben en las peticiones HTTP. Cuando analicemos FastAPI veremos cómo definir clases que se utilizan para definir los modelos de los datos que se envían y reciben en las peticiones HTTP.\nEn este capítulo de la unidad, aprendimos acerca de la herencia, polimorfismo y encapsulación en la Programación Orientada a Objetos (POO) en Python.",
    "crumbs": [
      "Unidad 3: Programación Orientada a Objetos en Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Herencia, Polimorfismo y Encapsulación</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/1_git_y_github.html#git",
    "href": "unidades/unidad4/1_git_y_github.html#git",
    "title": "Git y Github",
    "section": "Git",
    "text": "Git\n\n\n\n\nGit\n\n\n\nGit es un sistema de control de versiones distribuido que permite llevar un registro de los cambios en los archivos de un proyecto. Git es ampliamente utilizado en el desarrollo de software para colaborar en proyectos con otros desarrolladores.\n\nInstalación de Git\nPara instalar Git en tu computadora, sigue los siguientes pasos:\n\nDescarga el instalador de Git desde el siguiente enlace: https://git-scm.com/.\nEjecuta el instalador de Git y sigue las instrucciones del instalador.\nVerifica que Git se ha instalado correctamente ejecutando el siguiente comando en la terminal:\n\ngit --version\nSi Git se ha instalado correctamente, verás un mensaje similar a este:\ngit version 2.45.2\n\n\nComandos básicos de Git\nA continuación se muestran algunos comandos básicos de Git que te serán útiles para trabajar con Git:\n\ngit init: Inicializa un repositorio de Git en el directorio actual.\n\ngit init\n\ngit add: Agrega los archivos al área de preparación.\n\ngit add archivo.py\n\ngit commit: Guarda los cambios en el repositorio.\n\ngit commit -m \"Mensaje del commit\"\n\ngit status: Muestra el estado de los archivos en el repositorio.\n\ngit status\n\ngit log: Muestra el historial de los commits en el repositorio.\n\ngit log",
    "crumbs": [
      "Unidad 4: Herramientas de Desarrollo",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Git y Github</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/1_git_y_github.html#github",
    "href": "unidades/unidad4/1_git_y_github.html#github",
    "title": "Git y Github",
    "section": "Github",
    "text": "Github\n\n\n\n\nGithub\n\n\n\nGithub es una plataforma en línea que permite alojar proyectos de Git de forma gratuita. Github es ampliamente utilizado en el desarrollo de software para colaborar en proyectos con otros desarrolladores.\n\nCrear una cuenta en Github\nPara crear una cuenta en Github, sigue los siguientes pasos:\n\nIngresa a la página de Github: https://github.com.\nHaz clic en el botón Sign up.\nCompleta el formulario de registro con tu nombre de usuario, dirección de correo electrónico y contraseña.\nHaz clic en el botón Create account.\nVerifica tu dirección de correo electrónico.\n\n\n\nCrear un repositorio en Github\nPara crear un repositorio en Github, sigue los siguientes pasos:\n\nInicia sesión en tu cuenta de Github.\nHaz clic en el botón New.\nCompleta el formulario con el nombre del repositorio, la descripción y la visibilidad del repositorio.\nHaz clic en el botón Create repository.\nCopia la URL del repositorio.\n\n\n\nClonar un repositorio en Github\nPara clonar un repositorio en Github, sigue los siguientes pasos:\n\nCopia la URL del repositorio.\nAbre la terminal y ejecuta el siguiente comando:\n\ngit clone URL_del_repositorio\n\nIngresa tus credenciales de Github.\nEl repositorio se clonará en tu computadora.\n\n\n\nSubir cambios a un repositorio en Github\nPara subir cambios a un repositorio en Github, sigue los siguientes pasos:\n\nAgrega los archivos al área de preparación.\n\ngit add archivo.py\n\nGuarda los cambios en el repositorio.\n\ngit commit -m \"Mensaje del commit\"\n\nSube los cambios al repositorio en Github.\n\ngit push\n\nIngresa tus credenciales de Github.\nLos cambios se subirán al repositorio en Github.\n\n\n\nDescargar cambios de un repositorio en Github\nPara descargar cambios de un repositorio en Github, sigue los siguientes pasos:\n\nDescarga los cambios del repositorio en Github.\n\ngit pull\n\nIngresa tus credenciales de Github.\nLos cambios se descargarán del repositorio en Github.\n\nEn FastAPI es posible utilizar Git y Github para colaborar en proyectos con otros desarrolladores. Cuando analicemos FastAPI veremos cómo utilizar Git y Github para colaborar en proyectos con otros desarrolladores.\nEn este capítulo de la unidad, aprendimos acerca de Git y Github.",
    "crumbs": [
      "Unidad 4: Herramientas de Desarrollo",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Git y Github</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/1_configuracion_basica.html",
    "href": "unidades/unidad5/1_configuracion_basica.html",
    "title": "Configuración y Estructura",
    "section": "",
    "text": "Instalación de FastAPI\nAntes de realizar la instalación de FastAPI es muy recomendable que en cualquier proyecto de python se cree un entorno virtual, para ello se puede utilizar la herramienta virtualenv que permite crear entornos virtuales de python. O de forma nativa con el módulo venv que viene incluido en la instalación de python.\nPara crear un entorno virtual con venv se utiliza el siguiente comando:\nPara activar el entorno virtual se utiliza el siguiente comando:\nEn el caso de sistemas operativos Windows se utiliza el siguiente comando:\nPara desactivar el entorno virtual se utiliza el siguiente comando:\nPara instalar FastAPI se utiliza el siguiente comando:\nPara instalar el servidor web uvicorn se utiliza el siguiente comando:",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Configuración y Estructura</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/1_configuracion_basica.html#instalación-de-fastapi",
    "href": "unidades/unidad5/1_configuracion_basica.html#instalación-de-fastapi",
    "title": "Configuración y Estructura",
    "section": "",
    "text": "python -m venv nombre_entorno\n\nsource nombre_entorno/bin/activate\n\nnombre_entorno\\Scripts\\activate\n\ndeactivate\n\npip install fastapi\n\npip install uvicorn",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Configuración y Estructura</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/1_configuracion_basica.html#estructura-de-un-proyecto-fastapi",
    "href": "unidades/unidad5/1_configuracion_basica.html#estructura-de-un-proyecto-fastapi",
    "title": "Configuración y Estructura",
    "section": "Estructura de un proyecto FastAPI",
    "text": "Estructura de un proyecto FastAPI\nA continuación se muestra la estructura de un proyecto FastAPI:\nproyecto/\n│\n├── app/\n│   ├── __init__.py\n│   ├── main.py\n│\n├── .gitignore\n├── README.md\n├── requirements.txt\n\napp/: Directorio que contiene el código fuente de la aplicación.\n\n__init__.py: Archivo que indica que el directorio es un paquete de Python.\nmain.py: Archivo principal de la aplicación que contiene la lógica de la API.\n\n.gitignore: Archivo que contiene los archivos y directorios que se deben ignorar en el control de versiones.\nREADME.md: Archivo que contiene la documentación del proyecto.\nrequirements.txt: Archivo que contiene las dependencias del proyecto.\n\nEn el directorio app/ se encuentra el archivo main.py que contiene la lógica de la API. En el archivo main.py se definen las rutas de la API y las operaciones que se realizan en cada ruta.\nEn el archivo main.py se importan las clases FastAPI y Request de la librería fastapi y se crea una instancia de la clase FastAPI que representa la aplicación. A continuación se definen las rutas de la API utilizando la instancia de la clase FastAPI y se definen las operaciones que se realizan en cada ruta.\nEn el archivo main.py se define una ruta de la API utilizando el decorador (app.get?)() y se define una operación que retorna un mensaje de bienvenida. A continuación se muestra un ejemplo de un archivo main.py con una ruta de la API y una operación que retorna un mensaje de bienvenida:\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"Hello, World!\"}\nEn el ejemplo anterior se importa la clase FastAPI de la librería fastapi y se crea una instancia de la clase FastAPI llamada app. A continuación se define una ruta de la API utilizando el decorador (app.get?)() y se define una operación llamada read_root() que retorna un mensaje de bienvenida.",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Configuración y Estructura</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/1_configuracion_basica.html#ejecución-de-un-proyecto-fastapi",
    "href": "unidades/unidad5/1_configuracion_basica.html#ejecución-de-un-proyecto-fastapi",
    "title": "Configuración y Estructura",
    "section": "Ejecución de un proyecto FastAPI",
    "text": "Ejecución de un proyecto FastAPI\n\nPara ejecutar un proyecto FastAPI se utiliza el siguiente comando:\nuvicorn app.main:app --reload\nEn el comando anterior se utiliza el comando uvicorn para ejecutar el servidor web y se especifica el archivo main.py que contiene la lógica de la API y la instancia de la clase FastAPI llamada app. El parámetro –reload indica que el servidor web se reinicia automáticamente cuando se realizan cambios en el código fuente.\nAl ejecutar el comando anterior se inicia el servidor web y se muestra la URL de la API en la consola. Para acceder a la API se utiliza la URL que se muestra en la consola.",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Configuración y Estructura</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/1_configuracion_basica.html#documentación-de-una-api-fastapi",
    "href": "unidades/unidad5/1_configuracion_basica.html#documentación-de-una-api-fastapi",
    "title": "Configuración y Estructura",
    "section": "Documentación de una API FastAPI",
    "text": "Documentación de una API FastAPI\nFastAPI proporciona una interfaz de usuario interactiva que permite visualizar y probar la API. Para acceder a la interfaz de usuario se utiliza la URL de la API seguida de /docs. Por ejemplo, si la URL de la API es http://127.0.0.1:8000, la URL de la interfaz de usuario es http://127.0.0.1:8000/docs.\nEn la interfaz de usuario se muestra una lista de las rutas de la API y las operaciones que se realizan en cada ruta. Para probar una operación se hace clic en la operación y se ingresan los parámetros de la operación.\nA continuación se muestra un ejemplo de la interfaz de usuario de FastAPI:\n\nEn la interfaz de usuario se muestra una lista de las rutas de la API y las operaciones que se realizan en cada ruta.\nFastAPI cuenta con una segunda opción de documentación llamada /redoc que es una interfaz de usuario alternativa que permite visualizar y probar la API. Para acceder a la interfaz de usuario redoc se utiliza la URL de la API seguida de /redoc. Por ejemplo, si la URL de la API es http://127.0.0.1:8000, la URL de la interfaz de usuario redoc es http://127.0.0.1:8000/redoc.\n\nEn la interfaz de usuario redoc se muestra una lista de las rutas de la API y las operaciones que se realizan en cada ruta.\nEn este capítulo se ha mostrado la instalación de FastAPI, la estructura de un proyecto FastAPI, la ejecución de un proyecto FastAPI y la documentación de una API FastAPI. En los siguientes capítulos se mostrará cómo definir rutas y operaciones en FastAPI, cómo validar datos en FastAPI y cómo trabajar con bases de datos en FastAPI.",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Configuración y Estructura</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_pydantic.html#qué-es-pydantic",
    "href": "unidades/unidad5/2_pydantic.html#qué-es-pydantic",
    "title": "Pydantic en FastAPI",
    "section": "¿Qué es Pydantic?",
    "text": "¿Qué es Pydantic?\nPydantic es una librería de Python que permite definir esquemas de datos y validarlos. Pydantic se utiliza en FastAPI para definir los modelos de datos que se utilizan en la API y validar los datos que se reciben en las solicitudes.\nEn FastAPI se utiliza Pydantic para definir los modelos de datos que se utilizan en la API. Pydantic es una librería que permite definir esquemas de datos y validarlos.\nLa estructura del proyecto de esta unidad es la siguiente:\nproyecto/\n│\n├── app/\n│   ├── __init__.py\n│   ├── main.py\n│\n├── .gitignore\n├── README.md\n├── requirements.txt\nA continuación se muestra un ejemplo de cómo definir un modelo de datos con Pydantic:\nEs necesario instalar Pydantic para poder utilizarlo en FastAPI. Para instalar Pydantic se utiliza el siguiente comando:\npip install pydantic\nSin olvidar nuestro framework FastAPI:\npip install fastapi uvicorn\nAhora se puede definir un modelo de datos con Pydantic. A continuación se muestra un ejemplo de cómo definir un modelo de datos con Pydantic:\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    price: float\n    is_offer: bool = None\nEn el ejemplo anterior se define un modelo de datos Item que contiene tres campos: name, price e is_offer. El campo name es de tipo str, el campo price es de tipo float y el campo is_offer es de tipo bool con un valor por defecto de None.\nPara utilizar el modelo de datos Item en una operación de la API se importa la clase Item y se utiliza como tipo de parámetro en la operación. A continuación se muestra un ejemplo de cómo utilizar el modelo de datos Item en una operación de la API:\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nclass Item(BaseModel):\n    name: str\n    price: float\n    is_offer: bool = None\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return {\"name\": item.name, \"price\": item.price}\nEn el ejemplo anterior se importa la clase Item y se define una operación create_item() que recibe un parámetro item de tipo Item. En la operación se retorna un diccionario con los campos name y price del objeto item.\nEs necesario probar nuestro código, para ello se ejecuta el servidor web con el siguiente comando:\nuvicorn app.main:app --reload\nPara probar la operación create_item() se puede utilizar una herramienta como Tunder Client o Postman. A continuación se muestra un ejemplo de cómo probar la operación create_item() con Tunder Client:\nPara realizar una solicitud POST a la ruta /items/ con un objeto item se utiliza la siguiente solicitud:\nPOST /items/\nContent-Type: application/json\n\n{\n    \"name\": \"item1\",\n    \"price\": 10.5\n}\nEn la solicitud anterior se envía un objeto item con los campos name y price. La operación create_item() recibe el objeto item y retorna un diccionario con los campos name y price del objeto item.\n\n\n\nEn este ejemplo se ha utilizado Pydantic para definir un modelo de datos Item y validar los datos que se reciben en la solicitud. Pydantic permite definir esquemas de datos y validarlos, lo que facilita la creación de APIs con FastAPI.\nPara comprobar que todo funciona correctamente, se puede probar la operación create_item() con Tunder Client o Postman y verificar que se retorna un diccionario con los campos name y price del objeto item.",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Pydantic en FastAPI</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/3_modelos_en_fastapi.html#definición-de-modelos-en-fastapi",
    "href": "unidades/unidad5/3_modelos_en_fastapi.html#definición-de-modelos-en-fastapi",
    "title": "Modelos en FastAPI",
    "section": "Definición de modelos en FastAPI",
    "text": "Definición de modelos en FastAPI\nEn FastAPI se pueden definir modelos utilizando Pydantic. Un modelo en FastAPI es una clase que hereda de la clase BaseModel de Pydantic y define los campos que componen el modelo. A continuación se muestra un ejemplo de un modelo en FastAPI, para este ejemplo vamos a crear una tienda de vehiculos:\nEl proyecto tendrá la siguiente estructura:\nproyecto/\n│\n├── app/\n│   ├── __init__.py\n│   ├── main.py\n│   ├── models.py\n│\n├── .gitignore\n├── README.md\n├── requirements.txt\nEn el directorio app/ se encuentra el archivo models.py que contiene la definición del modelo Vehicle. A continuación se muestra el contenido del archivo models.py:\nfrom pydantic import BaseModel\n\nclass Vehicle(BaseModel):\n    make: str\n    model: str\n    year: int\n    price: float\nEn el ejemplo anterior se define un modelo llamado Vehicle que hereda de la clase BaseModel de Pydantic. El modelo Vehicle tiene los siguientes campos:\n\nmake: Campo de tipo str que representa la marca del vehículo.\nmodel: Campo de tipo str que representa el modelo del vehículo.\nyear: Campo de tipo int que representa el año del vehículo.\nprice: Campo de tipo float que representa el precio del vehículo.",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Modelos en FastAPI</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/3_modelos_en_fastapi.html#uso-de-modelos-en-fastapi",
    "href": "unidades/unidad5/3_modelos_en_fastapi.html#uso-de-modelos-en-fastapi",
    "title": "Modelos en FastAPI",
    "section": "Uso de modelos en FastAPI",
    "text": "Uso de modelos en FastAPI\nUna vez que se ha definido un modelo en FastAPI, se puede utilizar el modelo en las rutas de la API para validar y serializar datos. A continuación se muestra un ejemplo de cómo utilizar el modelo Vehicle en una ruta de la API:\nfrom fastapi import FastAPI\nfrom .models import Vehicle\n\napp = FastAPI()\n\n@app.post(\"/vehicles/\")\ndef create_vehicle(vehicle: Vehicle):\n    return vehicle\n\n@app.get(\"/vehicles/{vehicle_id}\")\ndef read_vehicle(vehicle_id: int):\n    return {\"vehicle_id\": vehicle_id}\n\n@app.put(\"/vehicles/{vehicle_id}\")\ndef update_vehicle(vehicle_id: int, vehicle: Vehicle):\n    return {\"vehicle_id\": vehicle_id, \"vehicle\": vehicle}\n\n@app.delete(\"/vehicles/{vehicle_id}\")\ndef delete_vehicle(vehicle_id: int):\n    return {\"vehicle_id\": vehicle_id}\nEn el ejemplo anterior se importa la clase Vehicle del archivo models.py y se define una ruta de la API que recibe un objeto de tipo Vehicle en el cuerpo de la petición. La ruta de la API utiliza el decorador @app.post() para indicar que se trata de una petición de tipo POST. La operación create_vehicle() recibe un objeto de tipo Vehicle y retorna el mismo objeto.\nEn el ejemplo anterior también se definen otras rutas de la API que utilizan el modelo Vehicle para validar y serializar datos. En la ruta de la API que recibe un parámetro de tipo int se utiliza el modelo Vehicle para serializar el objeto de tipo Vehicle y retornar el objeto serializado.\nEn este capítulo aprendimos acerca de los modelos en FastAPI y cómo se pueden utilizar para validar y serializar datos en una API. En el próximo capítulo veremos cómo utilizar rutas y validaciones en FastAPI.",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Modelos en FastAPI</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_rutas_y_validaciones_en_fastapi.html",
    "href": "unidades/unidad5/4_rutas_y_validaciones_en_fastapi.html",
    "title": "Rutas y Validaciones en FastAPI",
    "section": "",
    "text": "Definición de rutas en FastAPI\nEn FastAPI se pueden definir rutas utilizando decoradores. Un decorador es una función que toma otra función y extiende su funcionalidad sin modificarla. En FastAPI, los decoradores se utilizan para definir rutas en la API. A continuación se muestra un ejemplo de un Sistema de Inventario para aprender cómo definir una ruta en FastAPI:\nEl proyecto tendrá la siguiente estructura:\nEn el directorio app/ se encuentra el archivo routes.py que contiene la definición de las rutas de la API. Vamos a crear los modelos, las rutas y las validaciones para un Sistema de Inventario. A continuación se muestra el contenido del archivo models:\nEn el ejemplo anterior se define un modelo llamado Item que hereda de la clase BaseModel de Pydantic. El modelo Item tiene los siguientes campos:",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Rutas y Validaciones en FastAPI</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_rutas_y_validaciones_en_fastapi.html#definición-de-rutas-en-fastapi",
    "href": "unidades/unidad5/4_rutas_y_validaciones_en_fastapi.html#definición-de-rutas-en-fastapi",
    "title": "Rutas y Validaciones en FastAPI",
    "section": "",
    "text": "proyecto/\n│\n├── app/\n│   ├── __init__.py\n│   ├── main.py\n|   |── models.py\n|   |── routes.py\n│\n├── .gitignore\n├── README.md\n├── requirements.txt\n\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    id: int\n    name: str\n    description: str\n    price: float\n    tax: float\n\n\nid: Campo de tipo int que representa el identificador del artículo.\nname: Campo de tipo str que representa el nombre del artículo.\ndescription: Campo de tipo str que representa la descripción del artículo.\nprice: Campo de tipo float que representa el precio del artículo.\ntax: Campo de tipo float que representa el impuesto del artículo.",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Rutas y Validaciones en FastAPI</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_rutas_y_validaciones_en_fastapi.html#creación-de-las-rutas",
    "href": "unidades/unidad5/4_rutas_y_validaciones_en_fastapi.html#creación-de-las-rutas",
    "title": "Rutas y Validaciones en FastAPI",
    "section": "Creación de las Rutas",
    "text": "Creación de las Rutas\nEn este proyecto tambien crearemos un CRUD para el modelo Item. A continuación se muestra el contenido del archivo routes.py que contiene la definición de las rutas de la API:\nfrom fastapi import APIRouter, HTTPException\nfrom .models import Item\n\nrouter = APIRouter()\n\ninventory = []\n\n@router.post(\"/items/\")\ndef create_item(item: Item):\n    inventory.append(item)\n    return item\n\n@router.get(\"/items/\")\ndef read_items():\n    return inventory\n\n@router.get(\"/items/{item_id}\")\ndef read_item(item_id: int):\n    for item in inventory:\n        if item.id == item_id:\n            return item\n    raise HTTPException(status_code=404, detail=\"Item not found\")\n\n@router.put(\"/items/{item_id}\")\ndef update_item(item_id: int, item: Item):\n    for i in range(len(inventory)):\n        if inventory[i].id == item_id:\n            inventory[i] = item\n            return item\n    raise HTTPException(status_code=404, detail=\"Item not found\")\n\n@router.delete(\"/items/{item_id}\")\ndef delete_item(item_id: int):\n    for i in range(len(inventory)):\n        if inventory[i].id == item_id:\n            item = inventory.pop(i)\n            return item\n    raise HTTPException(status_code=404, detail=\"Item not found\")\nEn el ejemplo anterior se definen las siguientes rutas:\n\nPOST /items/: Ruta para crear un nuevo artículo en el inventario.\nGET /items/: Ruta para obtener todos los artículos del inventario.\nGET /items/{item_id}: Ruta para obtener un artículo específico del inventario.\nPUT /items/{item_id}: Ruta para actualizar un artículo específico del inventario.\nDELETE /items/{item_id}: Ruta para eliminar un artículo específico del inventario.",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Rutas y Validaciones en FastAPI</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_rutas_y_validaciones_en_fastapi.html#uso-de-las-rutas-en-fastapi",
    "href": "unidades/unidad5/4_rutas_y_validaciones_en_fastapi.html#uso-de-las-rutas-en-fastapi",
    "title": "Rutas y Validaciones en FastAPI",
    "section": "Uso de las Rutas en FastAPI",
    "text": "Uso de las Rutas en FastAPI\nPara utilizar las rutas definidas en FastAPI, se deben importar las rutas en el archivo principal de la aplicación. A continuación se muestra un ejemplo de cómo importar las rutas en el archivo main.py:\nfrom fastapi import FastAPI\nfrom .routes import router\n\napp = FastAPI()\n\napp.include_router(router)\nEn el ejemplo anterior se importa el objeto router que contiene las rutas definidas en el archivo routes.py. Luego, se utiliza el método include_router() para incluir las rutas en la aplicación FastAPI.",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Rutas y Validaciones en FastAPI</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_rutas_y_validaciones_en_fastapi.html#probar-las-rutas-en-fastapi",
    "href": "unidades/unidad5/4_rutas_y_validaciones_en_fastapi.html#probar-las-rutas-en-fastapi",
    "title": "Rutas y Validaciones en FastAPI",
    "section": "Probar las Rutas en FastAPI",
    "text": "Probar las Rutas en FastAPI\nPara ejecutar la aplicación, se debe utilizar el comando uvicorn en la terminal.\nuvicorn app.main:app --reload\nPara probar las rutas definidas en FastAPI, se puede utilizar la interfaz de usuario de Swagger que se genera automáticamente al ejecutar la aplicación. Para acceder a la interfaz de usuario de Swagger, se debe abrir un navegador web y visitar la URL http://localhost:8000/docs.\n\n\n\nEn la interfaz de usuario de Swagger se pueden probar las rutas de la API enviando peticiones HTTP y visualizando las respuestas. Por ejemplo, se puede probar la ruta POST /items/ para crear un nuevo artículo en el inventario enviando un objeto JSON con los datos del artículo.\nEjemplo:\n{\n    \"id\": 1,\n    \"name\": \"Laptop\",\n    \"description\": \"Dell Inspiron 15\",\n    \"price\": 500.0,\n    \"tax\": 0.1\n}\n\n\n\n\nEn el ejemplo anterior se envía una petición POST a la ruta /items/ con un objeto JSON que representa un artículo. La API responde con el mismo objeto JSON que se envió en la petición. Tambien podemos probar las demás rutas de la API.\nPara probar la ruta GET /items/ se puede enviar una petición GET a la ruta /items/ para obtener todos los artículos del inventario.\n\n\n\n\nPara probar la ruta GET /items/{item_id} se puede enviar una petición GET a la ruta /items/{item_id} para obtener un artículo específico del inventario.\n\n\n\n\nPara probar la ruta PUT /items/{item_id} se puede enviar una petición PUT a la ruta /items/{item_id} con un objeto JSON que representa un artículo para actualizar un artículo específico del inventario.\nActualizaremos body por el siguiente JSON\n{ \n    \"id\": 1, \n    \"name\": \"Laptop\", \n    \"description\": \"Lenovo Thinkpad\", \n    \"price\": 350, \n    \"tax\": 0.1 \n}\n\n\n\n\nPara probar la ruta DELETE /items/{item_id} se puede enviar una petición DELETE a la ruta /items/{item_id} para eliminar un artículo específico del inventario.\n\n\n\nDe esta forma se pueden probar las rutas definidas en FastAPI utilizando la interfaz de usuario de Swagger.",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Rutas y Validaciones en FastAPI</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_rutas_y_validaciones_en_fastapi.html#validaciones-en-fastapi",
    "href": "unidades/unidad5/4_rutas_y_validaciones_en_fastapi.html#validaciones-en-fastapi",
    "title": "Rutas y Validaciones en FastAPI",
    "section": "Validaciones en FastAPI",
    "text": "Validaciones en FastAPI\nEn FastAPI se pueden realizar validaciones de datos utilizando los modelos definidos con Pydantic. Los modelos de Pydantic permiten definir tipos de datos, valores por defecto, validaciones y documentación para los campos de un modelo. En el ejemplo anterior se definió un modelo Item con los campos id, name, description, price y tax. A continuación se muestran algunas validaciones que se pueden realizar con Pydantic:\n\nTipos de datos: Se pueden definir los tipos de datos de los campos de un modelo. Por ejemplo, el campo id es de tipo int y el campo name es de tipo str.\nValores por defecto: Se pueden definir valores por defecto para los campos de un modelo. Por ejemplo, el campo tax tiene un valor por defecto de 0.0.\nValidaciones: Se pueden definir validaciones para los campos de un modelo. Por ejemplo, se puede definir una validación para el campo price que requiera que el valor sea mayor que cero.\nDocumentación: Se puede añadir documentación a los campos de un modelo utilizando la anotación Field de Pydantic. Por ejemplo, se puede añadir una descripción al campo name utilizando la anotación Field.\n\nEn el ejemplo anterior se utilizó el modelo Item para validar los datos de los artículos en el inventario. Al enviar una petición a la ruta POST /items/ con un objeto JSON que no cumpla con las validaciones del modelo Item, la API responde con un error indicando que los datos no son válidos.\nPor ejemplo si enviarmos un peticion post con el siguiente JSON\n{\n\"id\": 1,\n\"name\": \"Laptop\",\n\"description\": \"Dell Inspiron 15\",\n\"tax\": 0.1\n}\nLa API responderá con un error indicando que el campo price es requerido.\n\n\n\nDe esta forma se pueden realizar validaciones de datos en FastAPI utilizando los modelos definidos con Pydantic.\nEn este capítulo aprendimos acerca de cómo definir rutas en FastAPI utilizando decoradores y cómo realizar validaciones de datos utilizando los modelos definidos con Pydantic. En el próximo capítulo veremos cómo realizar API RESTful en FastAPI.",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Rutas y Validaciones en FastAPI</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/5_apis_restful_con_fastapi.html#creación-de-una-api-restful",
    "href": "unidades/unidad5/5_apis_restful_con_fastapi.html#creación-de-una-api-restful",
    "title": "APIs RESTful con FastAPI",
    "section": "Creación de una API RESTful",
    "text": "Creación de una API RESTful\nUna API RESTful es una API que sigue los principios de REST (Representational State Transfer). REST es un estilo de arquitectura de software que define un conjunto de restricciones para el diseño de servicios web. Las API RESTful son fáciles de entender, escalables y flexibles.\nEn FastAPI se pueden crear APIs RESTful utilizando rutas y modelos. A continuación se muestra un ejemplo de API RESTful para una Fundación de Adopción Animal, definiremos las adopciones, los animales y las personas que adoptan a los animales:\nEl proyecto tendrá la siguiente estructura:\nproyecto/\n│\n├── app/\n│   ├── __init__.py\n│   ├── main.py\n|   |── models.py\n|   |── routes.py\n│\n├── .gitignore\n├── README.md\n├── requirements.txt\nEn el directorio app/ se encuentra el archivo routes.py que contiene la definición de las rutas de la API. Vamos a crear los modelos, las rutas y las validaciones para una Fundación de Adopción Animal. A continuación se muestra el contenido del archivo models:\nfrom pydantic import BaseModel\n\nclass Adoption(BaseModel):\n    id: int\n    animal_id: int\n    person_id: int\n    date: str\n    status: str\n\nclass Animal(BaseModel):\n    id: int\n    name: str\n    species: str\n    breed: str\n\nclass Person(BaseModel):\n    id: int\n    name: str\n    email: str\n    phone: str\nEn el ejemplo anterior se definen los modelos Adoption, Animal y Person que heredan de la clase BaseModel de Pydantic. Cada modelo tiene sus propios campos que representan los datos de las adopciones, los animales y las personas.",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>APIs RESTful con FastAPI</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/5_apis_restful_con_fastapi.html#creación-de-las-rutas",
    "href": "unidades/unidad5/5_apis_restful_con_fastapi.html#creación-de-las-rutas",
    "title": "APIs RESTful con FastAPI",
    "section": "Creación de las Rutas",
    "text": "Creación de las Rutas\nA continuación se muestra el contenido del archivo routes.py que contiene la definición de las rutas de la API:\nfrom fastapi import APIRouter, HTTPException\nfrom .models import Adoption, Animal, Person\n\nrouter = APIRouter()\n\nadoptions = []\nanimals = []\npersons = []\n\n@router.post(\"/adoptions/\")\ndef create_adoption(adoption: Adoption):\n    adoptions.append(adoption)\n    return adoption\n\n@router.get(\"/adoptions/\")\ndef read_adoptions():\n    return adoptions\n\n@router.get(\"/adoptions/{adoption_id}\")\ndef read_adoption(adoption_id: int):\n    for adoption in adoptions:\n        if adoption.id == adoption_id:\n            return adoption\n\n@router.post(\"/animals/\")\ndef create_animal(animal: Animal):\n    animals.append(animal)\n    return animal\n\n@router.get(\"/animals/\")\ndef read_animals():\n    return animals\n\n@router.get(\"/animals/{animal_id}\")\ndef read_animal(animal_id: int):\n    for animal in animals:\n        if animal.id == animal_id:\n            return animal\n\n@router.post(\"/persons/\")\ndef create_person(person: Person):\n    persons.append(person)\n    return person\n\n@router.get(\"/persons/\")\ndef read_persons():\n    return persons\n\n@router.get(\"/persons/{person_id}\")\ndef read_person(person_id: int):\n    for person in persons:\n        if person.id == person_id:\n            return person\nEn el ejemplo anterior se definen las rutas para las adopciones, los animales y las personas. Cada ruta tiene un método HTTP asociado (POST, GET) y una función que se ejecuta cuando se accede a la ruta. Las rutas de la API permiten crear, leer, actualizar y eliminar datos de las adopciones, los animales y las personas.",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>APIs RESTful con FastAPI</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/5_apis_restful_con_fastapi.html#uso-de-las-rutas-en-fastapi",
    "href": "unidades/unidad5/5_apis_restful_con_fastapi.html#uso-de-las-rutas-en-fastapi",
    "title": "APIs RESTful con FastAPI",
    "section": "Uso de las Rutas en FastAPI",
    "text": "Uso de las Rutas en FastAPI\nPara utilizar las rutas definidas en FastAPI, se deben importar las rutas en el archivo principal de la aplicación. A continuación se muestra un ejemplo de cómo importar las rutas en el archivo main.py:\nfrom fastapi import FastAPI\nfrom .routes import router\n\napp = FastAPI()\n\napp.include_router(router)\nEn el ejemplo anterior se importa el objeto router que contiene las rutas definidas en el archivo routes.py. Luego, se utiliza el método include_router() para incluir las rutas en la aplicación FastAPI.",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>APIs RESTful con FastAPI</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/5_apis_restful_con_fastapi.html#crear-una-adopción",
    "href": "unidades/unidad5/5_apis_restful_con_fastapi.html#crear-una-adopción",
    "title": "APIs RESTful con FastAPI",
    "section": "Crear una Adopción",
    "text": "Crear una Adopción\nPara crear una adopción, se debe enviar una petición POST a la ruta /adoptions/ con los datos de la adopción en el cuerpo de la petición. A continuación se muestra un ejemplo de cómo crear una adopción:\n{\n    \"id\": 1,\n    \"animal_id\": 1,\n    \"person_id\": 1,\n    \"date\": \"2022-10-10\",\n    \"status\": \"pending\"\n}",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>APIs RESTful con FastAPI</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/5_apis_restful_con_fastapi.html#obtener-las-adopciones",
    "href": "unidades/unidad5/5_apis_restful_con_fastapi.html#obtener-las-adopciones",
    "title": "APIs RESTful con FastAPI",
    "section": "Obtener las Adopciones",
    "text": "Obtener las Adopciones\nPara obtener todas las adopciones, se debe enviar una petición GET a la ruta /adoptions/. A continuación se muestra un ejemplo de cómo obtener todas las adopciones:",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>APIs RESTful con FastAPI</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/5_apis_restful_con_fastapi.html#obtener-una-adopción",
    "href": "unidades/unidad5/5_apis_restful_con_fastapi.html#obtener-una-adopción",
    "title": "APIs RESTful con FastAPI",
    "section": "Obtener una Adopción",
    "text": "Obtener una Adopción\nPara obtener una adopción específica, se debe enviar una petición GET a la ruta /adoptions/{adoption_id} con el ID de la adopción en la URL. A continuación se muestra un ejemplo de cómo obtener una adopción específica:",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>APIs RESTful con FastAPI</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/5_apis_restful_con_fastapi.html#crear-un-animal",
    "href": "unidades/unidad5/5_apis_restful_con_fastapi.html#crear-un-animal",
    "title": "APIs RESTful con FastAPI",
    "section": "Crear un Animal",
    "text": "Crear un Animal\nPara crear un animal, se debe enviar una petición POST a la ruta /animals/ con los datos del animal en el cuerpo de la petición. A continuación se muestra un ejemplo de cómo crear un animal:\n{\n    \"id\": 1,\n    \"name\": \"Luna\",\n    \"species\": \"Dog\",\n    \"breed\": \"Labrador\"\n}",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>APIs RESTful con FastAPI</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/5_apis_restful_con_fastapi.html#obtener-los-animales",
    "href": "unidades/unidad5/5_apis_restful_con_fastapi.html#obtener-los-animales",
    "title": "APIs RESTful con FastAPI",
    "section": "Obtener los Animales",
    "text": "Obtener los Animales\nPara obtener todos los animales, se debe enviar una petición GET a la ruta /animals/. A continuación se muestra un ejemplo de cómo obtener todos los animales:",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>APIs RESTful con FastAPI</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/5_apis_restful_con_fastapi.html#obtener-un-animal",
    "href": "unidades/unidad5/5_apis_restful_con_fastapi.html#obtener-un-animal",
    "title": "APIs RESTful con FastAPI",
    "section": "Obtener un Animal",
    "text": "Obtener un Animal\nPara obtener un animal específico, se debe enviar una petición GET a la ruta /animals/{animal_id} con el ID del animal en la URL. A continuación se muestra un ejemplo de cómo obtener un animal específico:",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>APIs RESTful con FastAPI</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/5_apis_restful_con_fastapi.html#crear-una-persona",
    "href": "unidades/unidad5/5_apis_restful_con_fastapi.html#crear-una-persona",
    "title": "APIs RESTful con FastAPI",
    "section": "Crear una Persona",
    "text": "Crear una Persona\nPara crear una persona, se debe enviar una petición POST a la ruta /persons/ con los datos de la persona en el cuerpo de la petición. A continuación se muestra un ejemplo de cómo crear una persona:\n{\n    \"id\": 1,\n    \"name\": \"John Doe\",\n    \"email\": \"example@email.com\",\n    \"phone\": \"1234567890\"\n}",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>APIs RESTful con FastAPI</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/5_apis_restful_con_fastapi.html#obtener-las-personas",
    "href": "unidades/unidad5/5_apis_restful_con_fastapi.html#obtener-las-personas",
    "title": "APIs RESTful con FastAPI",
    "section": "Obtener las Personas",
    "text": "Obtener las Personas\nPara obtener todas las personas, se debe enviar una petición GET a la ruta /persons/. A continuación se muestra un ejemplo de cómo obtener todas las personas:",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>APIs RESTful con FastAPI</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/5_apis_restful_con_fastapi.html#obtener-una-persona",
    "href": "unidades/unidad5/5_apis_restful_con_fastapi.html#obtener-una-persona",
    "title": "APIs RESTful con FastAPI",
    "section": "Obtener una Persona",
    "text": "Obtener una Persona\nPara obtener una persona específica, se debe enviar una petición GET a la ruta /persons/{person_id} con el ID de la persona en la URL. A continuación se muestra un ejemplo de cómo obtener una persona específica:\n\n\n\nEn el ejemplo anterior se envía una petición GET a la ruta /persons/{person_id} para obtener una persona específica. La API responde con un objeto JSON que representa la persona con el ID especificado en la URL.\nComo podemos observar, hemos creado una API RESTful utilizando FastAPI. En el siguiente capítulo veremos cómo realizar pruebas unitarias en FastAPI.",
    "crumbs": [
      "Unidad 5: Introducción a FastAPI",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>APIs RESTful con FastAPI</span>"
    ]
  },
  {
    "objectID": "unidades/laboratorios/lab1.html",
    "href": "unidades/laboratorios/lab1.html",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "",
    "text": "1. Configuración Inicial del Proyecto",
    "crumbs": [
      "Laboratorios",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/laboratorios/lab1.html#configuración-inicial-del-proyecto",
    "href": "unidades/laboratorios/lab1.html#configuración-inicial-del-proyecto",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "",
    "text": "1.1. Crear un Proyecto Django\nAbre tu terminal y ejecuta los siguientes comandos para crear un nuevo proyecto Django:\npython -m venv env\nsource env/bin/activate\npip install django==4.2\ndjango-admin startproject ecommerce_project .\ncd ecommerce_project\n\n\n1.2 Crear una Aplicación Django\nDentro del directorio del proyecto, crea una aplicación para manejar el e-commerce:\npython manage.py startapp products\n\n\n1.3 Instalar Django Rest Framework\nInstala DRF usando pip:\npip install djangorestframework\n\n\n1.4 Configurar el Proyecto\nAñade ‘rest_framework’ y tu nueva aplicación ‘products’ a la lista INSTALLED_APPS en ecommerce_project/settings.py:\nINSTALLED_APPS = [\n    # ... otras apps\n    'rest_framework',\n    'products',\n]",
    "crumbs": [
      "Laboratorios",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/laboratorios/lab1.html#definir-el-modelo-de-datos",
    "href": "unidades/laboratorios/lab1.html#definir-el-modelo-de-datos",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "2. Definir el Modelo de Datos",
    "text": "2. Definir el Modelo de Datos\n\n2.1 Crear Modelos en products/models.py\nDefine los modelos para el e-commerce, como Product, Category, y Order:\nfrom django.db import models\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n\nclass Product(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField()\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    category = models.ForeignKey(Category, related_name='products', on_delete=models.CASCADE)\n    stock = models.PositiveIntegerField()\n\n    def __str__(self):\n        return self.name\n\nclass Order(models.Model):\n    product = models.ForeignKey(Product, related_name='orders', on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField()\n    total_price = models.DecimalField(max_digits=10, decimal_places=2)\n    order_date = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"Order {self.id} - {self.product.name}\"\n\n\n2.2 Crear y Aplicar Migraciones\nGenera y aplica las migraciones para los modelos:\npython manage.py makemigrations\npython manage.py migrate",
    "crumbs": [
      "Laboratorios",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/laboratorios/lab1.html#crear-serializers",
    "href": "unidades/laboratorios/lab1.html#crear-serializers",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "3. Crear Serializers",
    "text": "3. Crear Serializers\n\n3.1 Definir Serializers en products/serializers.py\nLos serializers se encargan de transformar los modelos en formatos JSON y viceversa:\nfrom rest_framework import serializers\nfrom .models import Category, Product, Order\n\nclass CategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Category\n        fields = '__all__'\n\nclass ProductSerializer(serializers.ModelSerializer):\n    category = CategorySerializer()\n\n    class Meta:\n        model = Product\n        fields = '__all__'\n\nclass OrderSerializer(serializers.ModelSerializer):\n    product = ProductSerializer()\n\n    class Meta:\n        model = Order\n        fields = '__all__'",
    "crumbs": [
      "Laboratorios",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/laboratorios/lab1.html#crear-vistas-y-rutas",
    "href": "unidades/laboratorios/lab1.html#crear-vistas-y-rutas",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "4. Crear Vistas y Rutas",
    "text": "4. Crear Vistas y Rutas\n\n4.1 Definir Vistas en products/views.py\nUtiliza las vistas basadas en clases de DRF para crear y manejar las operaciones CRUD:\nfrom rest_framework import generics\nfrom .models import Category, Product, Order\nfrom .serializers import CategorySerializer, ProductSerializer, OrderSerializer\n\nclass CategoryListCreate(generics.ListCreateAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n\nclass CategoryDetail(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n\nclass ProductListCreate(generics.ListCreateAPIView):\n    queryset = Product.objects.all()\n    serializer_class = ProductSerializer\n\nclass ProductDetail(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Product.objects.all()\n    serializer_class = ProductSerializer\n\nclass OrderListCreate(generics.ListCreateAPIView):\n    queryset = Order.objects.all()\n    serializer_class = OrderSerializer\n\nclass OrderDetail(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Order.objects.all()\n    serializer_class = OrderSerializer",
    "crumbs": [
      "Laboratorios",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/laboratorios/lab1.html#configurar-rutas-en-productsurls.py",
    "href": "unidades/laboratorios/lab1.html#configurar-rutas-en-productsurls.py",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "4.2 Configurar Rutas en products/urls.py",
    "text": "4.2 Configurar Rutas en products/urls.py\nDefine las rutas para acceder a las vistas:\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('categories/', views.CategoryListCreate.as_view(), name='category-list-create'),\n    path('categories/&lt;int:pk&gt;/', views.CategoryDetail.as_view(), name='category-detail'),\n    path('products/', views.ProductListCreate.as_view(), name='product-list-create'),\n    path('products/&lt;int:pk&gt;/', views.ProductDetail.as_view(), name='product-detail'),\n    path('orders/', views.OrderListCreate.as_view(), name='order-list-create'),\n    path('orders/&lt;int:pk&gt;/', views.OrderDetail.as_view(), name='order-detail'),\n]",
    "crumbs": [
      "Laboratorios",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/laboratorios/lab1.html#incluir-las-urls-en-ecommerce_projecturls.py",
    "href": "unidades/laboratorios/lab1.html#incluir-las-urls-en-ecommerce_projecturls.py",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "4.3 Incluir las URLs en ecommerce_project/urls.py",
    "text": "4.3 Incluir las URLs en ecommerce_project/urls.py\nAñade las URLs de la aplicación al archivo principal de URLs del proyecto:\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('products.urls')),\n]",
    "crumbs": [
      "Laboratorios",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/laboratorios/lab1.html#probar-la-api",
    "href": "unidades/laboratorios/lab1.html#probar-la-api",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "5. Probar la API",
    "text": "5. Probar la API\n\n5.1 Ejecutar el Servidor de Desarrollo\nInicia el servidor de desarrollo de Django:\npython manage.py runserver",
    "crumbs": [
      "Laboratorios",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/laboratorios/lab1.html#probar-los-endpoints",
    "href": "unidades/laboratorios/lab1.html#probar-los-endpoints",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "5.2 Probar los Endpoints",
    "text": "5.2 Probar los Endpoints\nUtiliza herramientas como Postman o cURL para probar los endpoints:\n\nListar categorías: GET /api/categories/\nCrear categoría: POST /api/categories/\nObtener categoría específica: GET /api/categories/{id}/\nActualizar categoría: PUT /api/categories/{id}/\nEliminar categoría: DELETE /api/categories/{id}/\n\nY lo mismo para productos y pedidos.\n\nListar productos: GET /api/products/\nCrear producto: POST /api/products/\nObtener producto específico: GET /api/products/{id}/\nActualizar producto: PUT /api/products/{id}/\nEliminar producto: DELETE /api/products/{id}/",
    "crumbs": [
      "Laboratorios",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/laboratorios/lab1.html#instalar-django-rest-swagger",
    "href": "unidades/laboratorios/lab1.html#instalar-django-rest-swagger",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "1. Instalar Django Rest Swagger",
    "text": "1. Instalar Django Rest Swagger\nInstala Django Rest Swagger usando pip:\npip install drf-yasg",
    "crumbs": [
      "Laboratorios",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/laboratorios/lab1.html#configurar-django-rest-swagger",
    "href": "unidades/laboratorios/lab1.html#configurar-django-rest-swagger",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "2. Configurar Django Rest Swagger",
    "text": "2. Configurar Django Rest Swagger\nAñade ‘rest_framework_swagger’ a la lista INSTALLED_APPS en ecommerce_project/settings.py:\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom rest_framework import permissions\nfrom drf_yasg.views import get_schema_view\nfrom drf_yasg import openapi\n\nschema_view = get_schema_view(\n    openapi.Info(\n        title=\"E-commerce API\",\n        default_version='v1',\n        description=\"API documentation for the E-commerce project\",\n        terms_of_service=\"https://www.google.com/policies/terms/\",\n        contact=openapi.Contact(email=\"contact@ecommerce.local\"),\n        license=openapi.License(name=\"BSD License\"),\n    ),\n    public=True,\n    permission_classes=(permissions.AllowAny,),\n)\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('products.urls')),\n    path('docs/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\n    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),\n]",
    "crumbs": [
      "Laboratorios",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/laboratorios/lab1.html#configurar-las-urls",
    "href": "unidades/laboratorios/lab1.html#configurar-las-urls",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "3. Configurar las URLs",
    "text": "3. Configurar las URLs\nAñade las URLs de Swagger al archivo principal de URLs del proyecto:\n´´´\nfrom rest_framework_swagger.views import get_swagger_view\n\nschema_view = get_swagger_view(title='E-Commerce API')\n\nurlpatterns = [\n    ´´´\n    path('docs/', schema_view),\n]\n\n\n\n\n\n\nTip\n\n\n\nPara evitar un error común es necesario instalr setuptools con el siguiente comando:\npip install setuptools\n\n\nFinalmente es necesario agregar el siguiente código al final del archivo settings.py\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'drf_yasg',\n    'rest_framework',\n    'products',\n]\n\n´´´\nREST_FRAMEWORK = {\n    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema'\n}\n\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:8000\",\n    \"http://127.0.0.1:8000\",\n    # Añade otros orígenes permitidos aquí\n]",
    "crumbs": [
      "Laboratorios",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/laboratorios/lab1.html#probar-la-documentación",
    "href": "unidades/laboratorios/lab1.html#probar-la-documentación",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "4. Probar la Documentación",
    "text": "4. Probar la Documentación",
    "crumbs": [
      "Laboratorios",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Acerca de mi",
    "section": "",
    "text": "¡Hola! Soy Diego Saavedra, un experto en desarrollo avanzado de software e investigación. Mi amplia experiencia abarca diversas tecnologías, incluyendo Python (Django, Flask, Fast API) y JavaScript (Express, Next, React, Nestjs), así como también tengo conocimientos sólidos en bases de datos, arquitecturas de software y liderazgo ágil.\nMi pasión por la innovación, el desarrollo y la educación me ha llevado a destacarme como un profesional versátil e invaluable. Estoy constantemente listo para enfrentar desafíos técnicos y liderar proyectos de vanguardia.\nMi formación académica incluye el ser estudiante de Doctorado centrado en la inteligencia artificial, estoy enfocando mi investigación en la detección de TDA+H y Asperger mediante Visión Artificial a traves de algoritmos de Inteligencia Artificial. Además, poseo una Maestría en Ciencias de la Computación, con un enfoque en el Deep Learning (Convolutional Neural Network) y la Atención.\nCon esta sólida base académica y experiencia profesional, estoy preparado para aportar soluciones innovadoras y liderar equipos hacia el éxito en cualquier proyecto tecnológico que se me presente.\nAdemás, tengo experiencia en el desarrollo móvil utilizando Flutter y en la implementación de soluciones backend utilizando servicios Backend as a Service (BaaS) como Firebase y Supabase.\nEn el ámbito de la educación, he sido docente de programación en institutos y universidades, actualmente soy parte del Departamento de Ciencias de la Computación en la Universidad de las Fuerzas Armadas ESPE, donde he impartido asignaturas de desarrollo de Software Web con tecnologías como JavaScript, Java y C# asi como sus respectivos frameworks.\nMi experiencia en el desarrollo de software y la investigación me ha permitido adquirir habilidades de liderazgo, trabajo en equipo y comunicación efectiva. Estoy seguro de que mi experiencia y habilidades serán de gran valor para cualquier proyecto tecnológico que se me presente.\nEn este curso aprenderás a desarrollar aplicaciones web con Python y Django, una de las tecnologías más populares y poderosas para el desarrollo de aplicaciones web. A lo largo del curso, aprenderás a crear aplicaciones web desde cero, utilizando Django y Python, y a implementar funcionalidades avanzadas como integración con APIs externas y mucho más.\nTambien veremos tecnologías como Git, Github, Docker, Python, Django, Django Rest Framework, Html5, Css3, JavaScript, Nodejs, Npm y React.\n\n\n¡Estoy emocionado de compartir contigo mi conocimiento y experiencia en el desarrollo de aplicaciones web con Python y Django!"
  },
  {
    "objectID": "license.html",
    "href": "license.html",
    "title": "Licencia",
    "section": "",
    "text": "Uso Permitido\nPuedes utilizar el contenido de este curso con fines educativos y personales. Puedes modificar los ejemplos y el código proporcionado para tus propias necesidades de aprendizaje."
  },
  {
    "objectID": "license.html#restricciones",
    "href": "license.html#restricciones",
    "title": "Licencia",
    "section": "Restricciones",
    "text": "Restricciones\nNo tienes permitido redistribuir, vender o utilizar el contenido de este curso para fines comerciales sin el permiso explícito de [Nombre de la Compañía]. Además, no tienes permitido copiar o duplicar el contenido del curso y presentarlo como propio."
  },
  {
    "objectID": "license.html#atribución",
    "href": "license.html#atribución",
    "title": "Licencia",
    "section": "Atribución",
    "text": "Atribución\nSi compartes los ejemplos, los fragmentos de código o el contenido de este curso en línea, te pedimos que proporciones la atribución adecuada a [Nombre de la Compañía]."
  },
  {
    "objectID": "license.html#cambios-en-la-licencia",
    "href": "license.html#cambios-en-la-licencia",
    "title": "Licencia",
    "section": "Cambios en la Licencia",
    "text": "Cambios en la Licencia\n[Nombre de la Compañía] se reserva el derecho de modificar los términos de esta licencia en cualquier momento. Cualquier cambio se reflejará en esta página.\nGracias por respetar nuestros derechos de autor y por tu comprensión."
  }
]